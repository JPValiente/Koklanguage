
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 26 12:21:17 CST 2019
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import Backend.*;
import Frontend.Panel;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 26 12:21:17 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\004\000\002\003\006\000\002\003\004\000\002\003\004" +
    "\000\002\003\007\000\002\003\005\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\007\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\003\000\002\006\003" +
    "\000\002\011\003\000\002\011\002\000\002\012\005\000" +
    "\002\012\002\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\006\000\002\013\004\000\002" +
    "\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\050\002\uffff\016\uffff\017\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036" +
    "\uffff\037\uffff\001\002\000\050\002\021\016\016\017\014" +
    "\020\020\021\015\022\027\023\005\024\017\025\010\026" +
    "\007\027\013\030\012\031\011\032\026\033\022\034\024" +
    "\035\023\036\030\037\025\001\002\000\052\002\ufff9\007" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\001\002" +
    "\000\052\002\uffe0\007\075\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\001\002\000\004\042\124\001\002\000\052" +
    "\002\ufff7\007\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037" +
    "\ufff7\001\002\000\006\015\105\042\106\001\002\000\004" +
    "\042\122\001\002\000\004\042\121\001\002\000\004\042" +
    "\120\001\002\000\004\042\117\001\002\000\004\042\116" +
    "\001\002\000\052\002\ufff8\007\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\037\ufff8\001\002\000\004\042\115\001\002" +
    "\000\004\002\001\001\002\000\052\002\ufff5\007\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\001\002\000\052" +
    "\002\ufff3\007\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\001\002\000\052\002\ufff4\007\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\001\002\000\004\006\113\001" +
    "\002\000\052\002\ufff6\007\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\001\002\000\052\002\ufffa\007\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\001\002\000\010" +
    "\004\033\037\034\042\031\001\002\000\066\002\uffe2\005" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\001\002\000" +
    "\004\040\051\001\002\000\010\004\033\037\034\042\031" +
    "\001\002\000\066\002\uffe3\005\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\001\002\000\064\002\uffe9\007\uffe9\010" +
    "\040\011\041\012\037\013\042\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\001\002\000\004\040\uffea\001" +
    "\002\000\010\004\033\037\034\042\031\001\002\000\010" +
    "\004\033\037\034\042\031\001\002\000\010\004\033\037" +
    "\034\042\031\001\002\000\010\004\033\037\034\042\031" +
    "\001\002\000\066\002\uffe4\005\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\001\002\000\066\002\uffe5\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\037\013\042\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\066\002" +
    "\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7\012\037\013\042" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\001" +
    "\002\000\066\002\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\001\002\000\014\005\050\010\040\011\041" +
    "\012\037\013\042\001\002\000\066\002\uffe8\005\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\044\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\041\uffde\001\002\000\044\016\064" +
    "\017\062\020\066\021\063\022\074\023\053\024\065\025" +
    "\056\026\055\027\061\030\060\031\057\032\073\033\070" +
    "\034\072\035\071\041\054\001\002\000\046\007\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\041\uffd8\001\002\000\052\002\uffee" +
    "\007\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\001" +
    "\002\000\004\042\110\001\002\000\046\007\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\035\uffd6\041\uffd6\001\002\000\006\015\105\042" +
    "\106\001\002\000\004\042\104\001\002\000\004\042\103" +
    "\001\002\000\004\042\102\001\002\000\004\042\101\001" +
    "\002\000\004\042\100\001\002\000\046\007\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\041\uffd7\001\002\000\004\042\077\001" +
    "\002\000\046\007\075\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\041\uffe0" +
    "\001\002\000\046\007\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\041" +
    "\uffd4\001\002\000\046\007\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\041\uffd2\001\002\000\046\007\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\041\uffd3\001\002\000\046\007\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\041\uffd5\001\002\000\046\007\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\041\uffd9\001\002\000\052\002\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\001\002\000" +
    "\044\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\041\uffdf\001\002\000\046" +
    "\007\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\035\uffdb\041\uffdb\001\002\000" +
    "\046\007\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\041\uffdd\001\002" +
    "\000\046\007\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\041\uffda\001" +
    "\002\000\046\007\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\041\uffdc" +
    "\001\002\000\046\007\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\041" +
    "\uffcf\001\002\000\046\007\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\041\uffce\001\002\000\054\002\uffeb\007\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\001\002\000\054" +
    "\002\uffec\007\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec" +
    "\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037" +
    "\uffec\041\uffec\001\002\000\046\007\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\041\uffd1\001\002\000\004\014\111\001\002\000" +
    "\004\042\112\001\002\000\046\007\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\041\uffd0\001\002\000\010\004\033\037\034\042" +
    "\031\001\002\000\052\002\uffed\007\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\001\002\000\052\002\ufffc\007" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002" +
    "\000\052\002\ufffe\007\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\001\002\000\052\002\ufffb\007\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\001\002\000\052\002" +
    "\ufffd\007\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\001\002\000\052\002\ufff0\007\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\037\ufff0\001\002\000\052\002\uffef\007\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\001\002\000" +
    "\052\002\ufff2\007\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\001\002\000\004\014\125\001\002\000\004\042" +
    "\126\001\002\000\052\002\ufff1\007\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\001\002\000\050\002\000\016" +
    "\000\017\000\020\000\021\000\022\000\023\000\024\000" +
    "\025\000\026\000\027\000\030\000\031\000\032\000\033" +
    "\000\034\000\035\000\036\000\037\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\003\001\001\000\004\003\005\001" +
    "\001\000\002\001\001\000\004\011\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\031\006\034\007\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\045\001\001\000\004\006\044\001\001\000" +
    "\004\006\043\001\001\000\004\006\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\051" +
    "\001\001\000\004\013\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\034\007\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// Connect this parser to a scanner!
	

	public parser(Analizador_Lexico lex) {
		super(lex);
	}

        public void syntax_error(Symbol cur_token) {
					Panel.Console.append("No entendi lo que quisiste decir en la linea "+(cur_token.left)+", columna "+(cur_token.right)+" cuando escribiste: "+(cur_token.value)+"\n");
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
    String texto = "";
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // s21 ::= POSITIONY NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "positiony " + N1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s21 ::= POSITIONX NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "positionx " + N1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // s21 ::= POSITIONXY NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "positionxy " + N1.toString() + "," + N2.toString() +"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // s21 ::= COLOR s2 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "color " + A1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // s21 ::= TODRAW 
            {
              Object RESULT =null;
		texto = texto + "todraw " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // s21 ::= TOERASE 
            {
              Object RESULT =null;
		texto = texto + "toerase " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s21 ::= SHOWTURTLE 
            {
              Object RESULT =null;
		texto = texto + "showturtle " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s21 ::= HIDETURTLE 
            {
              Object RESULT =null;
		texto = texto + "hideturtle " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s21 ::= TOCENTER 
            {
              Object RESULT =null;
		texto = texto + "tocenter " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s21 ::= PENDOWN 
            {
              Object RESULT =null;
		texto = texto + "pendown " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s21 ::= PENUP 
            {
              Object RESULT =null;
		texto = texto + "penup " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s21 ::= CLEARS 
            {
              Object RESULT =null;
		texto = texto + "clears " + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s21 ::= RIGHT NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "right " + A1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s21 ::= LEFT NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "left " + A1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s21 ::= BACKWARD NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "backward " + A1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s21 ::= FORWARD NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		texto = texto + "forward " + A1.toString() + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s21",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s20 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s20 ::= s20 s21 s11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s20",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s11 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s11 ::= COMENTARIO 
            {
              Object RESULT =null;
		int C1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object C1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = C1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s11",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // e ::= NUMERO 
            {
              Object RESULT =null;
		int R4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R4.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // e ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int R4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R4.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // e ::= e DIVISION e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R2.toString() + "/" + R3.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // e ::= e MENOS e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R2.toString() + "-" + R3.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // e ::= e MULTIPLICACION e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R2.toString() + "*" + R3.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // e ::= e MAS e 
            {
              Object RESULT =null;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R2.toString() + "+" + R3.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // e ::= PABIERTO e PCERRADO 
            {
              Object RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object R2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object P2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "(" + R2.toString() + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= e 
            {
              Object RESULT =null;
		int R1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object R1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = R1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s3 ::= expresion 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object E1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = E1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s3",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s2 ::= HEXADECIMAL 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = B1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s2 ::= NUMERO 
            {
              Object RESULT =null;
		int B1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = B1.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s1 ::= IDENTIFICADOR IGUAL expresion 
            {
              Object RESULT =null;
		int K1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int K1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object K1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int K2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int K2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object K2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.assignID(K1.toString(),K2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s1 ::= REPEAT s3 CABIERTO s20 CCERRADO 
            {
              Object RESULT =null;
		int A4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int A4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object A4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("Hice un ciclo");
                texto = ModificarTortuga.repeat(texto,A4.toString());
                ModificarTortuga.executeRepeat(texto);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s1 ::= POSITIONY NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.positiony(N1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s1 ::= POSITIONX NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.positionx(N1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s1 ::= POSITIONXY NUMERO COMA NUMERO 
            {
              Object RESULT =null;
		int N1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object N1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object N2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.positionxy(N1.toString(),N2.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s1 ::= COLOR s2 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.setColor(A1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s1 ::= TODRAW 
            {
              Object RESULT =null;
		ModificarTortuga.toDraw();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s1 ::= TOERASE 
            {
              Object RESULT =null;
		ModificarTortuga.toErase();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s1 ::= SHOWTURTLE 
            {
              Object RESULT =null;
		ModificarTortuga.showTurtle();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s1 ::= HIDETURTLE 
            {
              Object RESULT =null;
		ModificarTortuga.hideTurtle();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s1 ::= TOCENTER 
            {
              Object RESULT =null;
		ModificarTortuga.toCenter();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s1 ::= PENDOWN 
            {
              Object RESULT =null;
		ModificarTortuga.penDown();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s1 ::= PENUP 
            {
              Object RESULT =null;
		ModificarTortuga.penUp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= CLEARS 
            {
              Object RESULT =null;
		ModificarTortuga.clears();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= RIGHT NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.moveRight(A1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s1 ::= LEFT NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.moveLeft(A1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s1 ::= BACKWARD NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.moveBackward(A1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s1 ::= FORWARD NUMERO 
            {
              Object RESULT =null;
		int A1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object A1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ModificarTortuga.moveForward(A1.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s0 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s0 ::= s0 s1 s11 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

